generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int               @id @default(autoincrement())
  firebase_uid     String            @unique
  full_name        String
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  businesses       Business[]        @relation("BusinessOwner")
  businessProducts BusinessProduct[] @relation("BusinessProductCreator")
  personnel        Personnel[]
  profileUsers     ProfileUser[]
}

model Business {
  business_id      Int               @id @default(autoincrement())
  owner_id         Int?
  business_name    String
  business_address String?
  business_phone   String?
  cuil             String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  owner            User?             @relation("BusinessOwner", fields: [owner_id], references: [user_id])
  businessProducts BusinessProduct[]
  customers        Customer[]
  inventories      Inventory[]
  personnel        Personnel[]
  profiles         Profile[]
  purchases        Purchase[]
  sales            Sale[]
  suppliers        Supplier[]
}

model Brand {
  brand_id          Int             @id @default(autoincrement())
  brand_name        String
  brand_description String?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
  globalProducts    GlobalProduct[]
}

model GlobalProduct {
  product_id          Int               @id @default(autoincrement())
  product_name        String
  brand_id            Int?
  product_description String?
  product_code        String?           @unique
  generic_sale_price  Decimal?
  generic_buy_price   Decimal?
  created_at          DateTime          @default(now())
  updated_at          DateTime          @default(now())
  brand               Brand?            @relation(fields: [brand_id], references: [brand_id])
  inventories         Inventory[]
  productCategories   ProductCategory[]
  purchaseDetails     PurchaseDetail[]  @relation("GlobalProductPurchaseDetails")
  saleDetails         SaleDetail[]      @relation("GlobalProductSaleDetails")
}

model BusinessProduct {
  business_product_id Int               @id @default(autoincrement())
  business_id         Int
  custom_name         String?
  custom_description  String?
  custom_code         String?
  creator_id          Int?
  created_at          DateTime          @default(now())
  updated_at          DateTime          @default(now())
  business            Business          @relation(fields: [business_id], references: [business_id])
  creator             User?             @relation("BusinessProductCreator", fields: [creator_id], references: [user_id])
  inventories         Inventory[]
  productCategories   ProductCategory[]
  purchaseDetails     PurchaseDetail[]  @relation("BusinessProductPurchaseDetails")
  saleDetails         SaleDetail[]      @relation("BusinessProductSaleDetails")
}

model Inventory {
  inventory_id         Int              @id @default(autoincrement())
  business_id          Int
  business_product_id  Int?
  global_product_id    Int?
  stock_quantity_total Int
  created_at           DateTime         @default(now())
  updated_at           DateTime         @default(now())
  business             Business         @relation(fields: [business_id], references: [business_id])
  businessProduct      BusinessProduct? @relation(fields: [business_product_id], references: [business_product_id])
  globalProduct        GlobalProduct?   @relation(fields: [global_product_id], references: [product_id])
  prices               InventoryPrice[]
  lots                 Lot[]
}

model InventoryPrice {
  inventory_price_id Int       @id @default(autoincrement())
  inventory_id       Int
  price_type         PriceType
  price              Decimal
  valid_from         DateTime
  valid_to           DateTime?
  created_at         DateTime  @default(now())
  inventory          Inventory @relation(fields: [inventory_id], references: [inventory_id])
}

model Lot {
  lot_id          Int       @id @default(autoincrement())
  inventory_id    Int
  lot_number      String?
  entry_date      DateTime?
  expiration_date DateTime?
  stock_quantity  Int       @default(0)
  inventory       Inventory @relation(fields: [inventory_id], references: [inventory_id])
}

model Category {
  category_id          Int               @id @default(autoincrement())
  category_name        String
  category_description String?
  created_at           DateTime          @default(now())
  updated_at           DateTime          @default(now())
  productCategories    ProductCategory[]
}

model ProductCategory {
  product_category_id Int              @id @default(autoincrement())
  global_product_id   Int?
  business_product_id Int?
  category_id         Int
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now())
  businessProduct     BusinessProduct? @relation(fields: [business_product_id], references: [business_product_id])
  category            Category         @relation(fields: [category_id], references: [category_id])
  globalProduct       GlobalProduct?   @relation(fields: [global_product_id], references: [product_id])
}

model Personnel {
  personnel_id   Int       @id @default(autoincrement())
  business_id    Int
  personnel_name String
  email          String?
  phone          String?
  user_id        Int?
  position       String?
  salary         Decimal?
  start_date     DateTime?
  departure_date DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  business       Business  @relation(fields: [business_id], references: [business_id])
  user           User?     @relation(fields: [user_id], references: [user_id])
}

model Profile {
  profile_id   Int           @id @default(autoincrement())
  business_id  Int
  profile_name String?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @default(now())
  permissions  Permission[]
  business     Business      @relation(fields: [business_id], references: [business_id])
  profileUsers ProfileUser[]
}

model Service {
  service_id   Int          @id @default(autoincrement())
  service_name String       @unique
  description  String?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
  permissions  Permission[]
}

model Permission {
  permission_id Int      @id @default(autoincrement())
  profile_id    Int
  service_id    Int
  can_get       Boolean  @default(false)
  can_post      Boolean  @default(false)
  can_put       Boolean  @default(false)
  can_delete    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  profile       Profile  @relation(fields: [profile_id], references: [profile_id])
  service       Service  @relation(fields: [service_id], references: [service_id])
}

model ProfileUser {
  profile_user_id Int      @id @default(autoincrement())
  user_id         Int
  profile_id      Int
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
  profile         Profile  @relation(fields: [profile_id], references: [profile_id])
  user            User     @relation(fields: [user_id], references: [user_id])
}

model Customer {
  customer_id         Int      @id @default(autoincrement())
  business_id         Int
  customer_name       String
  contact_name        String?
  contact_phone       String?
  contact_email       String?
  contact_location    String?
  contact_description String?
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now())
  business            Business @relation(fields: [business_id], references: [business_id])
  sales               Sale[]
}

model Supplier {
  supplier_id         Int        @id @default(autoincrement())
  business_id         Int
  supplier_name       String
  contact_name        String?
  contact_phone       String?
  contact_email       String?
  contact_location    String?
  contact_description String?
  created_at          DateTime   @default(now())
  updated_at          DateTime   @default(now())
  purchases           Purchase[]
  business            Business   @relation(fields: [business_id], references: [business_id])
}

model Sale {
  sale_id      Int          @id @default(autoincrement())
  business_id  Int
  customer_id  Int?
  total_amount Decimal?
  status       SaleStatus   @default(PENDING)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
  business     Business     @relation(fields: [business_id], references: [business_id])
  customer     Customer?    @relation(fields: [customer_id], references: [customer_id])
  saleDetails  SaleDetail[]
}

model Purchase {
  purchase_id     Int              @id @default(autoincrement())
  business_id     Int
  supplier_id     Int?
  total_amount    Decimal?
  status          PurchaseStatus   @default(PENDING)
  receipt_file    String?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @default(now())
  business        Business         @relation(fields: [business_id], references: [business_id])
  supplier        Supplier?        @relation(fields: [supplier_id], references: [supplier_id])
  purchaseDetails PurchaseDetail[]
}

model SaleDetail {
  sale_detail_id      Int              @id @default(autoincrement())
  sale_id             Int
  business_product_id Int?
  global_product_id   Int?
  quantity            Int
  price               Decimal
  total_amount        Decimal?
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now())
  businessProduct     BusinessProduct? @relation("BusinessProductSaleDetails", fields: [business_product_id], references: [business_product_id])
  globalProduct       GlobalProduct?   @relation("GlobalProductSaleDetails", fields: [global_product_id], references: [product_id])
  sale                Sale             @relation(fields: [sale_id], references: [sale_id])
}

model PurchaseDetail {
  purchase_detail_id  Int              @id @default(autoincrement())
  purchase_id         Int
  business_product_id Int?
  global_product_id   Int?
  quantity            Int
  price               Decimal
  total_amount        Decimal?
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now())
  businessProduct     BusinessProduct? @relation("BusinessProductPurchaseDetails", fields: [business_product_id], references: [business_product_id])
  globalProduct       GlobalProduct?   @relation("GlobalProductPurchaseDetails", fields: [global_product_id], references: [product_id])
  purchase            Purchase         @relation(fields: [purchase_id], references: [purchase_id])
}

model SystemSetting {
  setting_id    Int      @id @default(autoincrement())
  setting_name  String
  setting_value String?
  created_at    DateTime @default(now())
}

enum PriceType {
  BUY
  SALE
  PROMO
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELED
}
